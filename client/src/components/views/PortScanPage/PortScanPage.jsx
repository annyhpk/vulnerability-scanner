import React, { useState, useEffect } from 'react';
import { Button, message, Input, AutoComplete } from "antd";
import { SearchOutlined, LoadingOutlined, LaptopOutlined, ExclamationCircleOutlined } from '@ant-design/icons';
import { useDispatch, useSelector } from "react-redux";
import { portScan, setTarget } from "../../../_actions/attack_action";

const renderItem = (title, count) => ({
  value: title,
  label: (
    <div
      style={{
        display: 'flex',
        justifyContent: 'space-between',
      }}
    >
      {title}
      <span>
      <LaptopOutlined /> {count}
      </span>
    </div>
  ),
});

const PortScanPage = () => {

  const dispatch = useDispatch();
  const Hosts = useSelector(state => state.attack_info.hostScan);
  const portInfo = useSelector(state => state.attack_info.portScan);
  const [Result, setResult] = useState([]);
  const [Clicked, setClicked] = useState(false);
  const [IP, setIP] = useState('')

  useEffect(() => {
    if (portInfo) {
      setResult(portInfo);
    }
  }, [portInfo])

  const onPortScan = () => {
    setClicked(true)
    setResult([])
    const data = { IP: IP }

    dispatch(portScan(data)).then((response) => {
      if (response.payload) {
        setResult(response.payload)
        const targetInfo = {
          IP: IP,
          Port: response.payload.filter(port => !isNaN(port[0]))
        }
        dispatch(setTarget(targetInfo))
        message.success("Scanning complete!")
      } else {
        setClicked(false)
        message.error("Fail to scan")
      }
    });
  }

  const onSelectInput = (e) => {
    setIP(e.target.value)
  }

  const onSelectOpt = (value) => {
    setIP(value)
  }

  return (
    <div>
      <p></p>
      <h3><SearchOutlined /> Port Scan</h3>
      <h3>1. Select the Target</h3>
      {!Hosts ? <h2 style={{color: 'orange'}}><ExclamationCircleOutlined /> please host scan</h2> :
      <AutoComplete
        dropdownClassName="certain-category-search-dropdown"
        dropdownMatchSelectWidth={300}
        style={{
          width: 200,
        }}
        options={[
          {
            label: 'Host List',
            options: Hosts.map(host => (renderItem(host, Hosts.indexOf(host)))),
          }
        ]}
        onChange={onSelectOpt}
      >
        <Input.Search size="large" placeholder="input here" onChange={onSelectInput}/>
      </AutoComplete>
      }
      <h3>2. please click button for scanning</h3>
      <h3>3. Please wait a moment</h3>

      { 
        Result.length ? Result.map(val => 
        (<p key={val}>{val}</p>)) : Clicked ? <h1><LoadingOutlined /> Scanning</h1> : <p>Click Scan</p>
      }
      <Button onClick={onPortScan}>Scan</Button>
    </div>
  )
}

export default PortScanPage
