import React, { useState } from "react";
import Axios from "axios";
import {
  Button,
  Form,
  Input,
  message,
  Switch,
  List,
  Typography,
  Divider,
} from "antd";
import { useDispatch } from "react-redux";
import { saveSSH } from "../../../../_actions/attack_action";

const layout = {
  labelCol: {
    span: 2,
  },
  wrapperCol: {
    span: 16,
  },
};

const SSH = (props) => {
  const dispatch = useDispatch();
  const [Result, setResult] = useState([]);
  const [Mode, setMode] = useState(false);
  const [Passwords, setPasswords] = useState([]);
  const [Value, setValue] = useState("");
  const [Ready, setReady] = useState(false);
  const [isLoading, setisLoading] = useState(false)

  const sshLogin = () => {
    setisLoading(true)

    const variable = {
      IP: props.Target,
      user: "msfadmin",
      data: Passwords.join(","),
    };

    Axios.post(
      "http://woosuk.izerone.co.kr:8010/api/attacks/sshLogin",
      variable
    ).then((response) => {
      if (response.data.success) {
        setResult(response.data.results);
        dispatch(saveSSH(response.data.results.slice(-1)[0]));
        setisLoading(false)
        message.success("complete!");
      } else {
        message.error("Fail to attack");
      }
    });
  };

  const onChangeMode = () => {
    setPasswords("");
    setReady(false);
    setMode(!Mode);
  };

  const onChangeValue = (e) => {
    setValue(e.target.value);
  };

  const openTextFile = () => {
    let input = document.createElement("input");

    input.type = "file";
    input.accept = "text/plain";

    input.click();
    input.onchange = (e) => {
      processFile(e.target.files[0]);
    };
  };

  const processFile = (file) => {
    let reader = new FileReader();
    reader.readAsText(file, "UTF-8");

    reader.onload = () => {
      const data = reader.result.split("\n");
      setPasswords(data);
      setReady(true);
    };
  };

  const onApply = () => {
    const data = Value.split(",").map((i) => i.trim());
    setPasswords(data);
    setReady(true);
  };

  return (
    <div>
      <h3>1. Brute Force Attack</h3>
      <Form {...layout}>
        Upload File : <Switch onChange={onChangeMode} />
        {Mode ? (
          <div>
            <br />
            <Button onClick={openTextFile}>Upload</Button>
          </div>
        ) : (
          <div>
            <br />
            <Form.Item label="Passwords" rules={[{ required: true }]}>
              <Input
                style={{ width: "500px" }}
                onChange={onChangeValue}
                value={Value}
                placeholder="EX) 1234, 123456, toor, ..."
              />
            </Form.Item>
            <Button onClick={onApply}>Case Add</Button>
            <br />
          </div>
        )}
      </Form>
      <Divider orientation="left">Attack Case</Divider>
      <List
        bordered
        dataSource={Passwords}
        renderItem={(item) => (
          <List.Item>
            <Typography.Text mark>[CASE]</Typography.Text> {item}
          </List.Item>
        )}
      />
      {!Result ? (
        <p>click</p>
      ) : (
        <div>
          <Divider orientation="left">Attack Result</Divider>
          <List
            loading={isLoading}
            bordered
            dataSource={Result}
            renderItem={(item) => (
              <List.Item>
                <Typography.Text mark>
                  {item.split(" ")[0] == "Success" ? "[Success]" : ""}
                </Typography.Text>{" "}
                {item.split("Success")}
              </List.Item>
            )}
          />
        </div>
      )}
      {Ready ? (
        <Button onClick={sshLogin}>Attack</Button>
      ) : (
        <Button disabled>Attack</Button>
      )}
    </div>
  );
};

export default SSH;
